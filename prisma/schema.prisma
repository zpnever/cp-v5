generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  CONTESTANT
}

model User {
  id             String   @id @default(cuid())
  name           String?
  email          String   @unique
  password       String?
  teamId         String?
  otp            String?
  photo          String?  @default("https://res.cloudinary.com/dcppvp6n6/image/upload/v1743202836/cp_assets/xbx9kldire0p12e0xraw.jpg")
  isVerified     Boolean  @default(false)
  isDisqualified Boolean  @default(false)
  role           Role     @default(CONTESTANT)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  Team              Team?               @relation(fields: [teamId], references: [id])
  SubmissionProblem SubmissionProblem[]
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Batch {
  id          String       @id @default(cuid())
  title       String
  description String?
  publish     Boolean      @default(false)
  timer       Int
  startedAt   DateTime
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  teams       BatchTeam[]
  problems    Problem[]
  submissions Submission[]
}

model Problem {
  id                 String              @id @default(cuid())
  title              String
  description        String
  batchId            String
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  batch              Batch               @relation(fields: [batchId], references: [id], onDelete: Cascade)
  functionExecution  String
  languages          Language[]
  testCases          TestCase[]
  submissionProblems SubmissionProblem[]
}

model Language {
  id               String   @id @default(cuid())
  name             String
  languageId       Int
  problemId        String
  functionTemplate String // Code
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  problem          Problem  @relation(fields: [problemId], references: [id], onDelete: Cascade)
}

model TestCase {
  id        String   @id @default(cuid())
  input     String
  output    String
  problemId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  problem   Problem  @relation(fields: [problemId], references: [id], onDelete: Cascade)
}

model BatchTeam {
  id        String   @id @default(cuid())
  batchId   String
  teamId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isStart   Boolean  @default(false)
  batch     Batch    @relation(fields: [batchId], references: [id], onDelete: Cascade)
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([batchId, teamId])
}

model Submission {
  id                  String              @id @default(cuid())
  teamId              String
  batchId             String
  isFinish            Boolean             @default(false)
  score               Float               @default(0)
  startAt             DateTime
  submittedAt         DateTime?
  totalProblemsSolved Int                 @default(0)
  completionTime      Int? // waktu selesai dikurang waktu mulai
  batch               Batch               @relation(fields: [batchId], references: [id], onDelete: Cascade)
  Team                Team                @relation(fields: [teamId], references: [id], onDelete: Cascade)
  submissionProblems  SubmissionProblem[]

  @@unique([batchId, teamId])
}

model SubmissionProblem {
  id            String     @id @default(cuid())
  teamId        String
  submissionId  String
  userId        String
  problemId     String
  languageId    Int?
  success       Boolean    @default(false)
  code          String?
  executionTime Float? // in Second
  memory        Int? // in KB
  submittedAt   DateTime   @default(now())
  submission    Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  problem       Problem    @relation(fields: [problemId], references: [id], onDelete: Cascade)
  user          User       @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Team {
  id             String       @id @default(cuid())
  name           String       @unique
  isDisqualified Boolean      @default(false)
  members        User[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  submissions    Submission[]
  batches        BatchTeam[]
}
